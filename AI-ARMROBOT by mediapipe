import cv2
import mediapipe as mp
import math
import serial
import time
arduino_port = 'COM4'  # Use '/dev/ttyUSB0' on Linux
baud_rate = 9600  #Must match Arduino baud rate


# Initialize the serial connection
ser = serial.Serial(arduino_port, baud_rate, timeout=1)
time.sleep(2)  # Allow time for Arduino to reset

def map_range(value, in_min, in_max, out_min, out_max):
   #Map a value from one range to another.
    return int((value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)
# Initialize MediaPipe Hands

    # Map Python input range (0-100) to Arduino's range (0-1023)
    mapped_value = map_range(input_value, 10,80 , 0, 1023)
    ser.write(f"{mapped_value}\n".encode())  # Send mapped value to Arduino
    response = ser.readline().decode().strip()  # Read Arduino's response
    print(response)

    
mp_hands = mp.solutions.hands
hands =mp_hands.Hands(min_detection_confidence=0.9,min_tracking_confidence=0.9)
mp_drawing = mp.solutions.drawing_utils

# Start Webcam
cap = cv2.VideoCapture(0)

def calculate_distance(coord1, coord2):
    """Calculate Euclidean distance between two points."""
    return math.sqrt((coord2[0] - coord1[0])**2 + (coord2[1] - coord1[1])**2)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Convert the frame to RGB
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb_frame)

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            # Draw landmarks on the frame
            mp_drawing.draw_landmarks(
                frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Get Thumb Tip and Index Finger Tip coordinates
            middle_tip = hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP]
            index_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
            middle_dip = hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_DIP]
            index_dip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_DIP]
            middle_pip = hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_PIP]
            index_pip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_PIP]
            index_mcp = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_MCP]
            middle_mcp = hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_MCP]

            h, w, _ = frame.shape  # Frame dimensions

            # Convert normalized coordinates to pixel values
            middle_coord = (int(middle_tip.x * w), int(middle_tip.y * h))
            index_coord = (int(index_tip.x * w), int(index_tip.y * h))
            middle_pip_coord = (int(middle_pip.x * w), int(middle_pip.y * h))
            index_pip_coord = (int(index_pip.x * w), int(index_pip.y * h))
            middle_dip_coord = (int(middle_dip.x * w), int(middle_dip.y * h))
            index_dip_coord = (int(index_dip.x * w), int(index_dip.y * h))
            # Calculate distance between Thumb and Index Finger
            distance = calculate_distance(middle_coord, index_coord)
            distance2= calculate_distance(middle_pip_coord, middle_dip_coord)
            distance3=calculate_distance(middle_dip_coord, index_dip_coord)
            #send_servo_input(distance)

            # Define controls based on distance
            if distance < 43 and middle_tip.y<middle_pip.y and middle_tip.y<middle_dip.y:  # Adjust threshold as needed
                
                
                cv2.putText(frame,"up with closed arm" , (10,100), cv2.FONT_HERSHEY_SIMPLEX,
                        1, (0,0,255), 2)               
                
                cv2.line(frame,middle_coord,index_coord,(0,0,255),2)
                
            if distance >43 and middle_tip.y<middle_pip.y and middle_tip.y<middle_dip.y:
                control = "up with Open arm"
                cv2.putText(frame, control, (10, 100), cv2.FONT_HERSHEY_SIMPLEX,
                        1, (0,255,0), 2)
                
                cv2.line(frame,middle_coord,index_coord,(0,255,0),2)
                
            if distance < 43 and middle_tip.y>middle_pip.y and middle_tip.y>middle_dip.y and middle_tip.y<middle_mcp.y and index_mcp.y>index_tip.y and middle_pip.y< middle_mcp.y and index_pip.y<index_mcp.y:
                control = "normal with closed arm"
                cv2.putText(frame, control, (10, 100), cv2.FONT_HERSHEY_SIMPLEX,
                        1, (0,0,255), 2)
                cv2.line(frame,middle_coord,index_coord,(0,0,255),2)
                
            if distance > 43 and middle_tip.y>middle_pip.y and middle_tip.y>middle_dip.y and middle_tip.y<middle_mcp.y and index_mcp.y>index_tip.y and middle_pip.y< middle_mcp.y and index_pip.y<index_mcp.y:
                control = "normal with open arm"
                cv2.putText(frame, control, (10, 100), cv2.FONT_HERSHEY_SIMPLEX,
                        1, (0,255,0), 2)
        
                 
                cv2.line(frame,middle_coord,index_coord,(0,255,0),2)
              
            if distance > 43 and middle_tip.y>middle_pip.y and middle_tip.y>middle_dip.y and middle_tip.y>middle_mcp.y and index_mcp.y<index_tip.y:
                control = "down with open arm"
                cv2.putText(frame, control, (10, 100), cv2.FONT_HERSHEY_SIMPLEX,
                        1, (0,255,0), 2)
        
                
                cv2.line(frame,middle_coord,index_coord,(0,255,0),2)             

            if distance < 43 and middle_tip.y>middle_pip.y and middle_tip.y>middle_dip.y and middle_tip.y>middle_mcp.y and index_mcp.y<index_tip.y:
                control = "down with closed arm"
                cv2.putText(frame, control, (10, 100), cv2.FONT_HERSHEY_SIMPLEX,
                        1, (0,0,255), 2)
        
                
                cv2.line(frame,middle_coord,index_coord,(0,0,255),2)     
             
            # Display Distance and Control
            cv2.putText(frame, f"Distance: {int(distance)} pixels",
                        (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)
         
            

    # Show the Frame
    cv2.imshow("Hand Tracking", frame)

    # Exit on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
